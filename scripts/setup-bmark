#!/usr/bin/env perl
# -*- perl -*-

##############################################################
#
# Benchmark setup for HAsim
#
# Usage: setup-bmark <bmark> <srcdir> <destdir>
#
# Setup benchmark to run in <destdir>
#
##############################################################

use strict;
use warnings;
use File::Basename;
use Getopt::Long;

sub Usage();
sub ErrorExit($);

#
# Turn on warnings
#
$^W = 1;

my $binary = undef;
my $compare = undef;
my $data = undef;
my $feeder = '';
my $group = undef;
my $isa = "unknown_ISA";
my $linkto = undef;
my $silent = undef;

#
# Find the root of the benchmarks directory tree.
#
my $benchmark_root = `awb-resolver --config=benchmarkdir`;
chomp($benchmark_root);
ErrorExit("Can't find benchmark root") if ($benchmark_root eq '');

#
# Parse the command line switches
#
if (! GetOptions('binary=s' => \$binary,
                 'compare=s' => \$compare,
                 'data=s' => \$data,
                 'feeder=s' => \$feeder,
                 'group=s' => \$group,
                 'isa=s' => \$isa,
                 'linkto=s' => \$linkto,
                 'silent=s' => \$silent,
                )) {
    Usage();
}

if ($#ARGV != 2) {
    Usage();
}

my $bmark = $ARGV[0];
my $srcdir = $ARGV[1];
my $dstdir = $ARGV[2];
my $basedir = `pwd`;
chomp($basedir);

print "BMARK: $bmark\n";
print "SRC: $srcdir\n";
print "DST: $dstdir\n";
print "BASE: $basedir\n";

if (! defined($group)) {
    $group = $bmark;
}


chdir($dstdir) or ErrorExit("Failed to cd to $dstdir");

mkdir('leap_debug') or ErrorExit("Failed to make 'leap_debug' directory");

# Set up benchmark for non-null feeders
if ($feeder ne "none") {
    my $src_prog;

    mkdir('program') or ErrorExit("Failed to make 'program' directory");

    if (defined($binary)) {
        $src_prog = "${benchmark_root}/hasim/${isa}/${group}/${binary}";
    }
    elsif (-f "${benchmark_root}/hasim/${isa}/${group}/${bmark}.${isa}.bin") {
        $src_prog = "${benchmark_root}/hasim/${isa}/${group}/${bmark}.${isa}.bin";
    }
    elsif (-f "${benchmark_root}/hasim/${isa}/${group}/${bmark}.${isa}.vmh") {
        $src_prog = "${benchmark_root}/hasim/${isa}/${group}/${bmark}.${isa}.vmh";
    }
    else {
        print STDERR "Can't find binary in ${benchmark_root}/hasim/${isa}/${group}\n";
        exit(1);
    }

    my $dst_prog = "program/" . basename($src_prog);

    unlink($dst_prog);
    symlink($src_prog, $dst_prog) or ErrorExit("Failed to symlink $dst_prog => $src_prog");
}

# Copy input data files
if (defined($data)) {
   # No trailing slash. Just link to a single object
   print "data: $data\n";
   symlink("${srcdir}/${data}", "input.264") or die("Failed to link to $data");
}

# Link to files or directories
if (defined($linkto)) {
    foreach my $tgt (split(':', $linkto)) {
        if ($tgt =~ /\/$/) {
            # Trailing slash means link to all the files individually within
            # a directory.
            if (-d $tgt) {
                opendir(DIR, $tgt) || die("Cannot open directory for --linkto $tgt\n");
                my @tgt_objs = readdir(DIR);
                closedir(DIR);
                foreach my $t (@tgt_objs) {
                    if (! (($t eq '.') || ($t eq '..'))) {
                        symlink("${srcdir}/${tgt}${t}", basename($t)) or die("Failed to link to ${tgt}${t}");
                    }
                }
            }
        }
        else {
            # No trailing slash. Just link to a single object
            symlink("${srcdir}/${tgt}", basename($tgt)) or die("Failed to link to $tgt");
        }
    }
}

# Store compare rules to config
open(ENV, '>>config/env.sh') or die("Failed to open config/env.sh");
print ENV "ISA=\"${isa}\"\n";
if (defined($compare)) {
    print ENV "compare=\"${compare}\"\n";
}
close(ENV);

#store silent mode to config
open(ENV, '>>config/env.sh') or die("Failed to open config/env.sh");
if (defined($silent)) {
    print ENV "silent=1\n";
}
close(ENV);

# Set up m5 environment
if ($feeder eq 'm5') {
    system("(cd $srcdir; tar cf - ./m5_configs) | tar xf -");
}

system("cp -f ${srcdir}/run.bmark run");
chmod(0755, "run");

exit(0);



sub Usage() {
    print STDERR "Usage: setup-bmark [--binary <name>]\n";
    print STDERR "                   [--compare <compare commands>]\n";
    print STDERR "                   [--data <tar file>]\n";
    print STDERR "                   [--group <name>]\n";
    print STDERR "                   [--isa <name>]\n";
    print STDERR "                   [--linkto <target0>:...:<targetN>]\n";
    print STDERR "                   [--silent] \n";
    print STDERR "                   <bmark> <srcdir> <dstdir>\n";
    exit(1);
}


sub ErrorExit($) {
    print STDERR @_ . "\n";
    exit(1);
}
